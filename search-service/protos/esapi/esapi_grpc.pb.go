// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: esapi.proto

package esapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EsApiClient is the client API for EsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EsApiClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PageDTO, error)
	Upsert(ctx context.Context, in *News, opts ...grpc.CallOption) (*CommonResponse, error)
	Delete(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*CommonResponse, error)
	Test(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommonResponse, error)
}

type esApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEsApiClient(cc grpc.ClientConnInterface) EsApiClient {
	return &esApiClient{cc}
}

func (c *esApiClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PageDTO, error) {
	out := new(PageDTO)
	err := c.cc.Invoke(ctx, "/esapi.EsApi/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esApiClient) Upsert(ctx context.Context, in *News, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/esapi.EsApi/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esApiClient) Delete(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/esapi.EsApi/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esApiClient) Test(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/esapi.EsApi/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EsApiServer is the server API for EsApi service.
// All implementations must embed UnimplementedEsApiServer
// for forward compatibility
type EsApiServer interface {
	Search(context.Context, *SearchRequest) (*PageDTO, error)
	Upsert(context.Context, *News) (*CommonResponse, error)
	Delete(context.Context, *NewsId) (*CommonResponse, error)
	Test(context.Context, *Empty) (*CommonResponse, error)
	mustEmbedUnimplementedEsApiServer()
}

// UnimplementedEsApiServer must be embedded to have forward compatible implementations.
type UnimplementedEsApiServer struct {
}

func (UnimplementedEsApiServer) Search(context.Context, *SearchRequest) (*PageDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedEsApiServer) Upsert(context.Context, *News) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedEsApiServer) Delete(context.Context, *NewsId) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEsApiServer) Test(context.Context, *Empty) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedEsApiServer) mustEmbedUnimplementedEsApiServer() {}

// UnsafeEsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EsApiServer will
// result in compilation errors.
type UnsafeEsApiServer interface {
	mustEmbedUnimplementedEsApiServer()
}

func RegisterEsApiServer(s grpc.ServiceRegistrar, srv EsApiServer) {
	s.RegisterService(&EsApi_ServiceDesc, srv)
}

func _EsApi_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsApiServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esapi.EsApi/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsApiServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsApi_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(News)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsApiServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esapi.EsApi/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsApiServer).Upsert(ctx, req.(*News))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esapi.EsApi/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsApiServer).Delete(ctx, req.(*NewsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsApi_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsApiServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esapi.EsApi/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsApiServer).Test(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EsApi_ServiceDesc is the grpc.ServiceDesc for EsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "esapi.EsApi",
	HandlerType: (*EsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _EsApi_Search_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _EsApi_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EsApi_Delete_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _EsApi_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "esapi.proto",
}
